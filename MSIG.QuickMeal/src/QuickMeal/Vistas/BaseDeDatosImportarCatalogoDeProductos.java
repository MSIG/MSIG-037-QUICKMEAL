/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package QuickMeal.Vistas;

import QuickMeal.Accesos.AccesoProducto;
import QuickMeal.Accesos.Mensaje;
import QuickMeal.Objetos.ObjetoProducto;
import QuickMeal.Servicios.ServicioLeerArchivoExcel;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Megabytes Soluciones Integrales Guatemala
 */
public class BaseDeDatosImportarCatalogoDeProductos extends javax.swing.JInternalFrame {

    Mensaje mensaje = new Mensaje();
    DefaultTableModel modelo;
    ArrayList lista = new ArrayList();

    /**
     * Creates new form wdwBaseDeDatosImportarCatalogoDeProductos
     */
    public BaseDeDatosImportarCatalogoDeProductos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSeleccionarArchivo = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatosExcel = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Importar Catalogo de Productos");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/QuickMeal/Imagenes/importar.png"))); // NOI18N

        btnSeleccionarArchivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QuickMeal/Imagenes/csv.png"))); // NOI18N
        btnSeleccionarArchivo.setText("Seleccionar Archivo CSV");
        btnSeleccionarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarArchivoActionPerformed(evt);
            }
        });

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/QuickMeal/Imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar Registros");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        tblDatosExcel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Producto", "Id Proveedor", "Descripcion", "Costo", "Cantidad", "Unidad Medida", "Caducidad", "Minimo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDatosExcel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSeleccionarArchivo)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSeleccionarArchivo)
                    .addComponent(btnGuardar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSeleccionarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarArchivoActionPerformed

        JFileChooser flcArchivo = new JFileChooser(".");
        int estado = flcArchivo.showOpenDialog(null);

        if (estado == JFileChooser.APPROVE_OPTION) {

            File archivo_seleccionado = flcArchivo.getSelectedFile();
            ServicioLeerArchivoExcel LeerArchivoExcel = new ServicioLeerArchivoExcel();
            String direccion = archivo_seleccionado.getParent() + "\\" + archivo_seleccionado.getName();

            lista = LeerArchivoExcel.leer_archivo_excel(direccion);
            Iterator reiterador = lista.iterator();

            try {

                Object datos[] = new Object[8];
                AccesoProducto ActualizarProducto = new AccesoProducto();
                modelo = (DefaultTableModel) tblDatosExcel.getModel();
                System.out.println("Entro " + direccion + " ");

                for (int i = tblDatosExcel.getRowCount() - 1; i >= 0; i--) {
                    modelo.removeRow(i);
                }

                while (reiterador.hasNext()) {
                    ObjetoProducto producto;
                    producto = (ObjetoProducto) reiterador.next();
                    datos[0] = producto.getId_producto();
                    datos[1] = producto.getId_proveedor();
                    datos[2] = producto.getDescripcion_producto();
                    datos[3] = producto.getCosto_producto();
                    datos[4] = producto.getCantidad_producto();
                    datos[5] = producto.getUnidad_medida_producto();
                    datos[6] = producto.getCaducidad_producto();
                    datos[7] = producto.getMinimo_producto();
                    try {
                        ActualizarProducto.actualizarProducto(producto);
                        modelo.addRow(datos);
                    } catch (Exception error) {
                        mensaje.manipulacionExcepciones("critico", "No se pudo actualizar el ID : " + producto.getId_producto() + " -> " + error);
                    }

                }

            } catch (Exception e) {
            }

        } else if (estado == JFileChooser.CANCEL_OPTION) {
            System.out.println("Se ha cancelado la operacion de lectura");
        }
    }//GEN-LAST:event_btnSeleccionarArchivoActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        ObjetoProducto Producto = new ObjetoProducto();
        AccesoProducto NuevoProducto = new AccesoProducto();
        
       //ALMACENAR LA INFORMACION DE CADA PRODUCTO EN LA BASE DE DATOS
        try{
            for(int cFila = 0; cFila<tblDatosExcel.getRowCount(); cFila++){
                Producto.setId_producto(Integer.parseInt(tblDatosExcel.getValueAt(cFila, 0).toString()));
                Producto.setId_proveedor(Integer.parseInt(tblDatosExcel.getValueAt(cFila, 1).toString()));
                Producto.setDescripcion_producto(tblDatosExcel.getValueAt(cFila, 2).toString());
                Producto.setCosto_producto(Float.parseFloat(tblDatosExcel.getValueAt(cFila, 3).toString()));
                Producto.setCantidad_producto(Integer.parseInt(tblDatosExcel.getValueAt(cFila, 4).toString()));
                Producto.setUnidad_medida_producto(tblDatosExcel.getValueAt(cFila, 5).toString());
                Producto.setCaducidad_producto(Integer.parseInt(tblDatosExcel.getValueAt(cFila, 6).toString()));
                Producto.setMinimo_producto(Integer.parseInt(tblDatosExcel.getValueAt(cFila, 7).toString()));
                try{
                    NuevoProducto.actualizarProducto(Producto);
                }catch(Exception error){
                    System.out.println("Ocurrio un erroe en la fila "+cFila+" -> "+error);
                    mensaje.manipulacionExcepciones("critico", "Error al actualizar la fila "+cFila);
                }
            } 
            
            mensaje.manipulacionExcepciones("informacion", "La Base de Datos fue Actualizada con Exito");
        }catch(Exception error){
            mensaje.manipulacionExcepciones("critico", "Ocurrio un error al actualizar los datos -> "+error);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnSeleccionarArchivo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDatosExcel;
    // End of variables declaration//GEN-END:variables
}